#======================= Annotations ==================================#
@SpringBootApplication - class is used to bootstrap and launch a Spring application from a Java main method.
						 This class automatically creates the ApplicationContext from the classpath, scan the configuration classes and launch the application.
					   - encapsulates @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations with their default attributes.

@SpringBootApplication(scanBasePackages="com.packages", "...packages") - to scan specific packages.

@EnableAutoConfiguration - as its name says, enables auto-configuration. It means that Spring Boot looks for auto-configuration beans on its classpath and automatically applies them.
						- Note, that we have to use this annotation with @Configuration
	
@Configuration - marks a class as a Configuration class for Java-based configuration. This is particularly important if you favor Java-based configuration over XML configuration.

@ComponentScan - enables component-scanning so that the web controller classes and other components you create will be automatically discovered and registered as beans in Spring's Application Context. All the@Controller classes you write are discovered by this annotation.
	
#======================= Starter ======================================#
	a. spring-boot-starter-web - used to create a rest web service.
							   - has embedded server like tomcat.
#======================= Plugins ======================================#
	a. spring-boot-maven-plugin - this plugin lets us run our simple java application as spring boot application.
